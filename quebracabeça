<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quebra-Cabeça do Necronomicon</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Courier New', monospace;
            background: url('https://i.pinimg.com/736x/96/b2/f7/96b2f771fb6770fdca5e1943b96d47e0.jpg') no-repeat center center fixed;
            background-size: cover;
            color: #e0d0a0;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
            padding: 20px;
        }
        
        body::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            z-index: -1;
        }
        
        .container {
            width: 95%;
            max-width: 600px;
            background: rgba(10, 10, 15, 0.92);
            border: 3px solid #222;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
            position: relative;
            overflow: hidden;
            z-index: 10;
        }
        
        .container::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                linear-gradient(90deg, transparent 50%, rgba(30, 30, 30, 0.05) 50%),
                linear-gradient(0deg, transparent 50%, rgba(30, 30, 30, 0.05) 50%);
            background-size: 30px 30px;
            opacity: 0.3;
            z-index: -1;
        }
        
        .puzzle-area {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            margin: 20px 0 30px;
        }
        
        .puzzle-container {
            width: 400px;
            height: 400px;
            border: 3px solid #222;
            border-radius: 8px;
            background: rgba(15, 15, 20, 0.95);
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
            gap: 2px;
            padding: 5px;
            box-shadow: 
                inset 0 0 20px rgba(0, 0, 0, 0.8),
                0 0 15px rgba(0, 0, 0, 0.5);
            overflow: hidden;
        }
        
        .puzzle-piece {
            background-size: 400px 400px;
            border: 1px solid #222;
            border-radius: 5px;
            cursor: grab;
            transition: all 0.2s;
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.7);
        }
        
        .puzzle-piece:hover {
            transform: scale(1.03);
            z-index: 10;
            box-shadow: 0 0 8px rgba(20, 20, 20, 0.8);
        }
        
        .puzzle-piece.dragging {
            opacity: 0.8;
            cursor: grabbing;
            transform: scale(1.05);
            box-shadow: 0 0 12px rgba(30, 30, 30, 0.9);
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin: 20px 0;
            flex-wrap: wrap;
        }
        
        button {
            background: linear-gradient(to bottom, #2c2c2c 0%, #1a1a1a 100%);
            color: #d0c090;
            border: 1px solid #333;
            padding: 12px 24px;
            font-size: 1rem;
            font-family: inherit;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: bold;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.4);
            min-width: 140px;
            position: relative;
            overflow: hidden;
        }
        
        button:hover {
            background: linear-gradient(to bottom, #3c3c3c 0%, #2a2a2a 100%);
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.5);
            color: #e0d0a0;
        }
        
        button:active {
            transform: translateY(1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        button::after {
            content: "";
            position: absolute;
            top: -50%;
            left: -60%;
            width: 20px;
            height: 200%;
            background: rgba(255, 255, 255, 0.1);
            transform: rotate(25deg);
            transition: all 0.5s;
        }
        
        button:hover::after {
            left: 120%;
        }
        
        .puzzle-complete-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 100;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.8s;
        }
        
        .puzzle-complete-overlay.active {
            opacity: 1;
            pointer-events: all;
        }
        
        .overlay-content {
            background: rgba(10, 10, 15, 0.95);
            border: 3px solid #222;
            border-radius: 12px;
            padding: 30px;
            text-align: center;
            max-width: 500px;
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.9);
        }
        
        .overlay-content h2 {
            font-size: 2.2rem;
            margin-bottom: 20px;
            color: #d0c090;
            text-shadow: 0 0 8px rgba(0, 0, 0, 0.8);
        }
        
        @media (max-width: 768px) {
            .puzzle-container {
                width: 350px;
                height: 350px;
            }
            
            .container {
                padding: 20px;
            }
            
            button {
                min-width: 120px;
                padding: 10px 18px;
                font-size: 0.9rem;
            }
        }
        
        @media (max-width: 480px) {
            .puzzle-container {
                width: 280px;
                height: 280px;
            }
            
            .controls {
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="puzzle-area">
            <div class="puzzle-container" id="puzzle-container">
                <!-- Peças do quebra-cabeça serão inseridas aqui -->
            </div>
        </div>
        
        <div class="controls">
            <button id="shuffle-btn">Embaralhar</button>
        </div>
        
        <div class="puzzle-complete-overlay" id="overlay">
            <div class="overlay-content">
                <h2>Quebra-cabeça concluído!</h2>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const puzzleContainer = document.getElementById('puzzle-container');
            const shuffleBtn = document.getElementById('shuffle-btn');
            const overlay = document.getElementById('overlay');
            
            const gridSize = 3;
            const totalPieces = gridSize * gridSize;
            let pieces = [];
            let solved = false;
            let draggedPiece = null;
            
            // URL da imagem do Necronomicon
            const IMAGE_URL = "https://i.pinimg.com/736x/79/6e/bd/796ebde24bf070101eba12c9b49b5673.jpg";
            
            // Inicializar o quebra-cabeça já embaralhado
            function initPuzzle() {
                puzzleContainer.innerHTML = '';
                pieces = [];
                solved = false;
                overlay.classList.remove('active');
                
                // Criar array de índices para embaralhar
                const indexes = [...Array(totalPieces).keys()];
                for (let i = indexes.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [indexes[i], indexes[j]] = [indexes[j], indexes[i]];
                }
                
                // Criar peças do quebra-cabeça na ordem embaralhada
                for (let i = 0; i < totalPieces; i++) {
                    const piece = document.createElement('div');
                    piece.classList.add('puzzle-piece');
                    const originalIndex = indexes[i];
                    piece.dataset.originalIndex = originalIndex;
                    piece.dataset.index = i;
                    
                    // Definir imagem de fundo para cada peça
                    const col = originalIndex % gridSize;
                    const row = Math.floor(originalIndex / gridSize);
                    
                    piece.style.backgroundImage = `url('${IMAGE_URL}')`;
                    piece.style.backgroundSize = '400px 400px';
                    piece.style.backgroundPosition = `-${col * (400 / gridSize)}px -${row * (400 / gridSize)}px`;
                    
                    // Adicionar eventos de drag and drop
                    piece.setAttribute('draggable', true);
                    piece.addEventListener('dragstart', handleDragStart);
                    piece.addEventListener('dragover', handleDragOver);
                    piece.addEventListener('drop', handleDrop);
                    piece.addEventListener('dragend', handleDragEnd);
                    
                    pieces.push(piece);
                    puzzleContainer.appendChild(piece);
                }
            }
            
            // Embaralhar o quebra-cabeça
            function shufflePuzzle() {
                const indexes = [...Array(totalPieces).keys()];
                
                // Embaralhar Fisher-Yates
                for (let i = indexes.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [indexes[i], indexes[j]] = [indexes[j], indexes[i]];
                }
                
                // Criar um novo array de peças na ordem embaralhada
                const shuffledPieces = new Array(totalPieces);
                pieces.forEach(piece => {
                    const originalIndex = parseInt(piece.dataset.originalIndex);
                    shuffledPieces[indexes[originalIndex]] = piece; // Coloca a peça na nova posição
                });

                // Atualizar os data-index das peças e reordenar no DOM
                puzzleContainer.innerHTML = ''; // Limpa o container
                shuffledPieces.forEach((piece, i) => {
                    piece.dataset.index = i; // Atualiza o índice da peça para sua nova posição visual
                    puzzleContainer.appendChild(piece);
                });
                pieces = shuffledPieces; // Atualiza o array global de peças
                
                solved = false;
            }
            
            // Eventos de drag and drop
            function handleDragStart(e) {
                if (solved) return;
                draggedPiece = this;
                e.dataTransfer.setData('text/plain', this.dataset.index);
                this.classList.add('dragging');
            }
            
            function handleDragOver(e) {
                e.preventDefault();
            }
            
            function handleDrop(e) {
                e.preventDefault();
                if (!draggedPiece || solved || draggedPiece === this) return; // Não permite arrastar e soltar na mesma peça
                
                const targetPiece = this;

                // Trocar as peças no array 'pieces'
                const draggedPieceCurrentIndex = pieces.indexOf(draggedPiece);
                const targetPieceCurrentIndex = pieces.indexOf(targetPiece);

                [pieces[draggedPieceCurrentIndex], pieces[targetPieceCurrentIndex]] = 
                [pieces[targetPieceCurrentIndex], pieces[draggedPieceCurrentIndex]];

                // Atualizar os data-index das peças para refletir a nova posição visual
                pieces.forEach((piece, i) => {
                    piece.dataset.index = i;
                });

                // Reordenar as peças visualmente no DOM
                reorderPieces();
                
                // Verificar solução
                checkSolution();
            }
            
            function handleDragEnd() {
                this.classList.remove('dragging');
                draggedPiece = null;
            }
            
            // Reordenar peças no container
            function reorderPieces() {
                // Ordenar peças pelo índice (que agora reflete a posição visual)
                pieces.sort((a, b) => parseInt(a.dataset.index) - parseInt(b.dataset.index));
                
                // Atualizar o DOM
                puzzleContainer.innerHTML = '';
                pieces.forEach(piece => {
                    puzzleContainer.appendChild(piece);
                });
            }
            
            // Verificar solução
            function checkSolution() {
                let isSolved = true;
                
                for (let i = 0; i < pieces.length; i++) {
                    if (parseInt(pieces[i].dataset.originalIndex) !== i) {
                        isSolved = false;
                        break;
                    }
                }
                
                if (isSolved) {
                    solved = true;
                    
                    // Mostrar overlay após um pequeno delay
                    setTimeout(() => {
                        overlay.classList.add('active');
                        
                        // Fechar o overlay automaticamente após 2 segundos
                        setTimeout(() => {
                            overlay.classList.remove('active');
                        }, 2000);
                    }, 1000);
                }
            }
            
            // Event listeners
            shuffleBtn.addEventListener('click', shufflePuzzle);
            
            // Inicializar o quebra-cabeça
            initPuzzle();
        });
    </script>
</body>
</html>
